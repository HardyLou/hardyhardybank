//constants
`define ON 1'b1
`define OFF 1`b0
`define BLANK 7'b1111111
`define ZERO 7'b1000000
`define ONE 7'b1111001
`define TWO 7'b0100100
`define THREE 7'b0110000
`define FOUR 7'b0011001
`define FIVE 7'b0010010
`define SIX 7'b0000010
`define SEVEN 7'b1111000
`define EIGHT 7'b0000000
`define NINE 7'b0011000
`define A 7'b0001000
`define b 7'b0000011
`define C 7'b1000110
`define d 7'b0100001
`define E 7'b0000110
`define F 7'b0001110
`define SEC 32'd24000000
`define HALFSEC 32'd12000000
`define R 7'b0101111
module L3C228(
    input [9:0]sw,
    input [3:0]key,
    input clock, // 24MHz
    output[9:0]ledr,
    output[7:0]ledg,
    output reg [6:0]hex0, hex1, hex2, hex3
);

integer vm_toggle_ON = 0;
integer vm_init = 0;

/** DEBUG**/
integer tr0 = 0;
integer tr1 = 0;
integer tr2 = 0;
integer tr3 = 0;
integer tr4 = 0;
integer tr5 = 0;
integer tr6 = 0;
integer tr7 = 0;
integer tr8 = 0;
integer tr9 = 0;
assign ledr[0] = tr0;
assign ledr[1] = tr1;
assign ledr[2] = tr2;
assign ledr[3] = tr3;
assign ledr[4] = tr4;
assign ledr[5] = tr5;
assign ledr[6] = tr6;
assign ledr[7] = tr7;
assign ledr[8] = tr8;
assign ledr[9] = tr9;

integer tg0 = 0;
integer tg1 = 0;
integer tg2 = 0;
integer tg3 = 0;
integer tg4 = 0;
integer tg5 = 0;
integer tg6 = 0;
integer tg7 = 0;
assign ledg[0] = tg0;
assign ledg[1] = tg1;
assign ledg[2] = tg2;
assign ledg[3] = tg3;
assign ledg[4] = tg4;
assign ledg[5] = tg5;
assign ledg[6] = tg6;
assign ledg[7] = tg7;
/**********/
//variable to hold $ value put into VM

integer balance = 0;
integer change = 0;
//integer greenLED = 0; //LED toggle
integer greenOUT = 0;

//variables to increment by inputted currency amount
integer increment = 0;
integer isCoin = 0;


//integer overPaid = 0;
integer vendQty = 0;
integer dispense = 0;
integer err_flag = 0;
integer reset_err = 0;


integer nickel = 5;
integer dime = 10;
integer quarter = 25;
integer dollar = 100;
integer card = 35;
integer price = 35;

//print function for hex display
task displayHEX;

    input [31:0]display; //set to 32 bits so we can reuse in part 5
    output [6:0] hex_3;

    //begin switch statement
    case (display)
            0:begin hex_3 = `ZERO;end
            1:begin hex_3 = `ONE;end
            2:begin hex_3 = `TWO;end
            3:begin hex_3 = `THREE;end
            4:begin hex_3 = `FOUR;end
            5:begin hex_3 = `FIVE;end
            6:begin hex_3 = `SIX;end
            7:begin hex_3 = `SEVEN;end
            8:begin hex_3 = `EIGHT;end
            9:begin hex_3 = `NINE;end
            10:begin hex_3 = `A;end
            11:begin hex_3 = `b;end
            12:begin hex_3 = `C;end
            13:begin hex_3 = `d;end
            14:begin hex_3 = `E;end
            15:begin hex_3 = `F; end
            16:begin hex_3 = `BLANK; end
            17:begin hex_3 = `R;end
        default: ;
    endcase

endtask

task print_CID;
    begin
        //print CID to hex display
        hex3 = `BLANK;
        hex2 = `TWO;
        hex1 = `TWO;
        hex0 = `EIGHT;

    end
endtask

task print_ERR;
        hex3 = `E;
        hex2 = `R;
        hex1 = `R;
        hex0 = `BLANK;

endtask

    always @ (posedge clock) begin

        //initially print CID
        if (vm_toggle_ON == 0 && vm_init == 0) begin
        print_CID;
        end

        if (reset_err == 1) begin
            print_ERR;
        end
        //at anypoint sw9 is ON, display the vended qty
        if (sw[9] == `ON )begin

            if(reset_err == 0)begin
            displayHEX(16, hex3);
            displayHEX(16, hex2);
            displayHEX(16, hex1);
            displayHEX((vendQty%16), hex0);end

        end //end if all switch down

        //change output from key3 ONLY when SW9 = OFF
        // also vm_toggle_ON will be @ 1 only the initial time
        else if (!sw[9] && vm_toggle_ON==1 && reset_err == 0) begin

            displayHEX( (balance/10), hex3);
            displayHEX( (balance%10), hex2);
            displayHEX( (change/10), hex1);
            displayHEX( (change%10), hex0);



        end // end display for valid entry

    end//end always

    always @ (negedge key[3]) begin

    if (key[3] == `OFF) begin
        if (vm_toggle_ON == 0 && vm_init ==0)begin vm_init = 1;
vm_toggle_ON = 1; end
        else if (vm_toggle_ON == 0 && vm_init ==1)begin vm_init = 1;
vm_toggle_ON = 1; balance = 0; isCoin = 0; dispense = 0; change = 0;
            err_flag = 0; reset_err = 0; increment = 0;end
        else if (sw[9:0]==10'b0100000000)begin
            err_flag = 0;
            dispense = 0;
            balance = 0;
            change = 0;
            reset_err = 0;
            increment = 0;
            isCoin = 0;
        end
        else begin//begin else machine ON! initial state

            //if( sw[8] == `OFF)begin //test, wrap this around nickel,
dime, quarter, dollar, card
            if (sw[4:0] == 5'b00000 && !sw[8])begin

            end

            //nickel
            else if(sw[4:0] == 5'b00001 && !sw[8] ) begin

                err_flag = 0;
                if (dispense == 1)begin balance = 0; dispense = 0;
change = 0;end

            isCoin = 1;
            increment = nickel;
            balance = balance + increment;

            end

            //dime
            else if(sw[4:0] == 5'b00010 && !sw[8] ) begin
            err_flag = 0;
                if (dispense == 1)begin balance = 0; dispense = 0;
change = 0;end

            isCoin = 1;
            increment = dime;
            balance = balance + increment;


            end

            //quarter
            else if(sw[4:0] == 5'b00100 && !sw[8]) begin
                err_flag = 0;
                if (dispense == 1)begin balance = 0; dispense = 0;
change = 0;end

            isCoin = 1;
            increment = quarter;
            balance = balance + increment;


            end

            //dollar
            else if(sw[4:0] == 5'b01000 && !sw[8]) begin

                //reset err_flag is previous increment isn't dollar
                if(increment != dollar) begin
                err_flag = 0;
                end
                //IF a soda was dispensed immediately before this
using a dollar as well
                if (dispense == 1 && err_flag == 1) begin
                isCoin = 2;
                increment = 0;
                balance = 0;
                change = 0;
                //err_flag = 0;
                reset_err = 1;
                vm_toggle_ON = 0;
                end

                //IF a soda was dispensed from some other coin
immediately before
                else if (dispense ==1 && err_flag == 0) begin
                    isCoin = 2;
                    balance = 0;
                    change = 0;
                    increment = dollar;
                    balance = balance + increment;
                end
                else if (dispense == 0)begin
                    isCoin = 2;
                    increment = dollar;
                    balance = balance + increment;
                    //vendQty = vendQty + 1;
                end

            end

            //card
            else if(sw[4:0] == 5'b10000 && !sw[8]) begin
                //reset err_flag is previous increment isn't card
                if(increment != card) begin
                err_flag = 0;
                end

                if (balance == price && change == 0) begin //if the
balanse is EXACTLY 3500 EROOR
                    isCoin = 3;
                    increment = 0;
                    balance = 0;
                    change = 0;
                    reset_err = 1;
                    vm_toggle_ON = 0;
                end
                //IF a soda was dispensed immediately before this
using a card as well
                if (dispense == 1 && err_flag == 1) begin
                isCoin = 3;
                increment = 0;
                balance = 0;
                change = 0;
                reset_err = 1;
                vm_toggle_ON = 0;
                end

                //IF a soda was dispensed from some other coin
immediately before
                else if (dispense ==1 && err_flag == 0) begin
                    isCoin = 3;
                    balance = 0;
                    change = 0;
                    increment = card;
                    balance = balance + increment;
                end
                else if (dispense == 0)begin
                    isCoin = 3;
                    increment = card;
                    balance = balance + increment;
                end

            end

            else begin // if these sw combinations are not up,
                reset_err = 1;
                vm_toggle_ON = 0;
            end

        /*    else  begin

                //'reset_err = 1;
                vm_toggle_ON = 0;
            end // else for any other combination besides single switch */

            if (balance >= price)begin
                if (isCoin == 1)begin
                    vendQty = vendQty + 1;
                    change = balance - price;
                    balance = price;
                    dispense = 1;
                end

                else if (isCoin ==2)begin


                    if (dispense == 1)begin
                    //CASE 1: if dispense is on from isCoin 1 and we
switch to $1 and input, QTY doesnt change

                        if (err_flag == 0)begin err_flag = 1; change =
balance - price; balance = price;end
                        else if (err_flag == 1)begin reset_err = 1; end

                    end// end CASE 1

                    else if (dispense == 0)begin
                        vendQty = vendQty + 1;
                        change = balance - price;
                        balance = price;
                        dispense = 1;
                        err_flag = 1;
                    end
                end //end if isCoin ==2

                else if(isCoin == 3) begin
                    if (dispense == 1)begin
                        //CASE 1: if dispense is on from isCoin 1 and
we switch to $1 and input, QTY doesnt change

                        if (err_flag == 0)begin err_flag = 1; change =
balance - price; balance = price;end
                        else if (err_flag == 1)begin reset_err = 1; end

                    end// end CASE 1

                    else if (dispense == 0)begin
                        vendQty = vendQty + 1;
                        change = balance - price;
                        balance = price;
                        dispense = 1;
                        err_flag = 1;
                    end
                end
            end//end balance check

        end //end else vm_toggle = VM_state = 1
    end //end if key pressed
end //end always

    always @ (posedge clock) begin

        if (dispense==0) begin
            tg0 = 0;
            tg1 = 0;
            tg2 = 0;
            tg3 = 0;
            tg4 = 0;
            tg5 = 0;
            tg6 = 0;
            tg7 = 0;
        end

        else if (dispense == 1) begin
            greenOUT = greenOUT + 1;

            case(greenOUT % `SEC)


            `HALFSEC:
                begin
                tg0 = 0;
                tg1 = 0;
                tg2 = 0;
                tg3 = 0;
                tg4 = 0;
                tg5 = 0;
                tg6 = 0;
                tg7 = 0; end

            1:
                begin
                tg0 = 1;
                tg1 = 1;
                tg2 = 1;
                tg3 = 1;
                tg4 = 1;
                tg5 = 1;
                tg6 = 1;
                tg7 = 1;
                end//greenOUT = 0;end
                default;
            endcase

        end //end else if dispense == 1

    end //end always

endmodule